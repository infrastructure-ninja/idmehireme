name: Test, Build, Push and Deploy Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:

  # Analyze Python source with a linter (should also do unit and integration testing here)
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install pylint
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        pip install -r ./app/requirements.txt --progress-bar off --quiet

    - name: Install dependencies
      run: |
        pip install -r ./app/requirements.txt --progress-bar off --quiet

    - name: Analyze the code with pylint
      run: |
        cd app
        pylint --ignore=build_info.py `ls -R|grep .py$|xargs`


  # Build Docker image and push to GCP Cloud Registry
  build:
    runs-on: ubuntu-latest
    needs: test

    outputs:
      docker_tag: ${{ steps.docker-build.outputs.DOCKER_TAG }}

    steps:
    - uses: actions/checkout@v2
    
    - name: Build and push the Docker image
      id: docker-build
      run: |
        export DOCKER_TAG=`date +%Y%m%d%H%M%S`
        export BUILD_TIME=`date +%H:%M:%S`
        export BUILD_DATE=`date +%Y-%m-%d`
        
        echo "DOCKER VERSION TAG IS ${DOCKER_TAG}"

        echo '::set-output name=DOCKER_TAG::'${DOCKER_TAG}
        echo "BUILD_DATE = '${BUILD_DATE}'"  > ./app/build_info.py
        echo "BUILD_TIME = '${BUILD_TIME}'" >> ./app/build_info.py
        echo "BUILD_TAG  = '${DOCKER_TAG}'" >> ./app/build_info.py
                
        echo "${{ secrets.GCP_DEPLOY_KEY }}" | base64 -d | docker login -u _json_key --password-stdin https://us.gcr.io
        docker build . --quiet --file Dockerfile  \
          --tag us.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:latest \
          --tag us.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:$DOCKER_TAG \
          
        docker push us.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:$DOCKER_TAG
        docker push us.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}:latest


  # Deploy using Terraform CLOUD
  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    environment: production
      
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    - name: Creating TFVARS files
      run:  echo 'app_docker_tag = "${{ needs.build.outputs.docker_tag }}"' > ./terraform/app_docker_tag.auto.tfvars
        
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    #- name: Terraform Format
    #  run: terraform -chdir=terraform fmt -check

    # Generates an execution plan for Terraform
    #- name: Terraform Plan
    #  run: terraform -chdir=terraform plan

    # On push to main, build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: |
        github.ref == 'refs/heads/main' &&
        (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        
      run: terraform -chdir=terraform apply -auto-approve


  # Simulate using Loader.io traffic simulation tool
  simulate:
    runs-on: ubuntu-latest
    needs: [deploy]
      
    defaults:
      run:
        shell: bash

    steps:
    - name: Trigger Loader.io with webhook action
      uses: joelwmale/webhook-action@2.1.0
      with:
        url: ${{ secrets.LOADER_WEBHOOK }}
    